CREATE OR REPLACE FUNCTION log_facture_changes()
RETURNS TRIGGER AS $$
DECLARE
    current_user_id TEXT := current_setting('my.user_id', true);
    current_user_email TEXT := current_setting('my.user_email', true);
    current_user_name TEXT := current_setting('my.user_name', true);
BEGIN
    IF (TG_OP = 'INSERT') THEN
        INSERT INTO "auditFacture" (
            "actionType", 
            "factureNumber", 
            "factureName", 
            "factureDate", 
            "newAmount", 
            "userId", 
            "userEmail", 
            "userName"
        ) VALUES (
            'CREATE',
            NEW."factureNumber",
            NEW."name",
            NEW."date",
            NEW."amount",
            current_user_id,
            current_user_email,
            current_user_name
        );
        RETURN NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO "auditFacture" (
            "actionType", 
            "factureNumber", 
            "factureName", 
            "factureDate", 
            "oldAmount", 
            "newAmount", 
            "userId", 
            "userEmail", 
            "userName"
        ) VALUES (
            'UPDATE',
            NEW."factureNumber",
            NEW."name",
            NEW."date",
            OLD."amount",
            NEW."amount",
            current_user_id,
            current_user_email,
            current_user_name
        );
        RETURN NEW;
    ELSIF (TG_OP = 'DELETE') THEN
        INSERT INTO "auditFacture" (
            "actionType", 
            "factureNumber", 
            "factureName", 
            "factureDate", 
            "oldAmount", 
            "userId", 
            "userEmail", 
            "userName"
        ) VALUES (
            'DELETE',
            OLD."factureNumber",
            OLD."name",
            OLD."date",
            OLD."amount",
            current_user_id,
            current_user_email,
            current_user_name
        );
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;




CREATE TRIGGER facture_changes_trigger
AFTER INSERT OR UPDATE OR DELETE ON "Facture"
FOR EACH ROW EXECUTE FUNCTION log_facture_changes();



========================================================================================================



CREATE OR REPLACE FUNCTION audit_facture_trigger()
RETURNS TRIGGER AS $$
DECLARE
    current_user_id TEXT := current_setting('my.user_id', true);
    current_user_email TEXT := current_setting('my.user_email', true);
    current_user_name TEXT := current_setting('my.user_name', true);
BEGIN
    -- Insertion dans la table d'audit lors de la création d'une facture
    IF TG_OP = 'INSERT' THEN
        INSERT INTO "auditFacture" (
            "actionType", "dateUpdate", "factureNumber", "factureName", 
            "factureDate", "oldAmount", "newAmount", "userId", "userEmail", "userName"
        )
        VALUES (
            'CREATE', now(), NEW."factureNumber", NEW."name", 
            NEW."date", 0, NEW."amount", current_user_id , current_user_email , current_user_name
        );

    -- Insertion lors d'une mise à jour
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO "auditFacture" (
            "actionType", "dateUpdate", "factureNumber", "factureName", 
            "factureDate", "oldAmount", "newAmount", "userId", "userEmail", "userName"
        )
        VALUES (
            'UPDATE', now(), NEW."factureNumber", NEW."name", 
            NEW."date", OLD."amount", NEW."amount", current_user_id , current_user_email, current_user_name
        );

    -- Insertion lors d'une suppression
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO "auditFacture" (
            "actionType", "dateUpdate", "factureNumber", "factureName", 
            "factureDate", "oldAmount", "newAmount", "userId", "userEmail", "userName"
        )
        VALUES (
            'DELETE', now(), OLD."factureNumber", OLD."name", 
            OLD."date", OLD."amount", 0, current_user_id, current_user_email, current_user_name
        );
    END IF;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER facture_audit_trigger
AFTER INSERT OR UPDATE OR DELETE ON "Facture"
FOR EACH ROW EXECUTE FUNCTION audit_facture_trigger();
